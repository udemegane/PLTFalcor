/***************************************************************************
 # PLT
 # Copyright (c) 2022-23, Shlomi Steinberg. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions
 # are met:
 #  * Redistributions of source code must retain the above copyright
 #    notice, this list of conditions and the following disclaimer.
 #  * Redistributions in binary form must reproduce the above copyright
 #    notice, this list of conditions and the following disclaimer in the
 #    documentation and/or other materials provided with the distribution.
 #  * Neither the name of NVIDIA CORPORATION nor the names of its
 #    contributors may be used to endorse or promote products derived
 #    from this software without specific prior written permission.
 #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS "AS IS" AND ANY
 # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************/

#pragma once
#define RAY_QUERY 1

#include "Scene/SceneDefines.slangh"
#include "Utils/Math/MathConstants.slangh"

#include "pltpt_constants.slangh"
#include "pltpt_debug.slangh"

#include "DebugViewType.slangh"

import InlineRayTracing;
#include "Manifolds.slangh"
import Scene.RaytracingInline;

import Scene.ShadingData;
import Scene.Scene;
import Scene.HitInfo;
import Scene.HitInfoType;

import Utils.HWSS;
import Utils.Math.MathHelpers;
import Utils.Sampling.SampleGenerator;
import Utils.Geometry.GeometryHelpers;
import Utils.Color.SpectrumSampler;
import Utils.Color.SpectrumUtils;
import Utils.Color.ColorHelpers;

import Path;
import PathHelper;
import Reservoir;
import Rendering.PLT;

import Rendering.Lights.LightHelpers;
import Rendering.Lights.EmissiveLightSampler;
import Rendering.Lights.EmissiveLightSamplerHelpers;
import Rendering.Lights.EnvMapSampler;

import Rendering.Materials.BxDF;
import Rendering.Materials.PLT.Mueller;

import Rendering.Utils.LightsSamplingUtils;
import Rendering.Utils.DifferentialShadingGeometry;

import ColourCoding;
import StaticVars;

cbuffer CB
{
    uint gFrameCount; // Frame count since scene was loaded.
    bool sceneChanged; // True if scene has changed since last frame.

    EnvMapSampler envMapSampler;
    EmissiveLightSampler emissiveSampler;

    uint2 kOutputSize;
    uint2 kTile;

    // Area on emissive geometry from which we source beams
    float kSourcingAreaFromEmissiveGeometry;
    // Max diffusivity of sourced beams
    float kSourcingMaxBeamOmega;

#if DO_DEBUG_VIEW == 1
    float kDebugViewIntensity;
#endif
}

void getLightTypeSelectionProbabilities(out float p[3])
{
    // Set relative probabilities of the different sampling techniques.
    // TODO: These should use estimated irradiance from each light type. Using equal probabilities for now.
    p[0] = kUseEnvLight ? 1.f : 0.f;
    p[1] = kUseEmissiveLights ? 1.f : 0.f;
    p[2] = kUseAnalyticLights ? 1.f : 0.f;

    // Normalize probabilities. Early out if zero.
    float sum = p[0] + p[1] + p[2];
    if (sum == 0.f)
        return;

    float invSum = 1.f / sum;
    p[0] *= invSum;
    p[1] *= invSum;
    p[2] *= invSum;
}

float getEnvMapSelectionProbability()
{
    float p[3];
    getLightTypeSelectionProbabilities(p);
    return p[0];
}
float getEmissiveSelectionProbability()
{
    float p[3];
    getLightTypeSelectionProbabilities(p);
    return p[1];
}
float getAnalyicSelectionProbability()
{
    float p[3];
    getLightTypeSelectionProbabilities(p);
    return p[2];
}

/** Select a light type for sampling.
    \param[out] lightType Selected light type.
    \param[out] pdf Probability for selected type.
    \param[in,out] sg Sample generator.
    \return Return true if selection is valid.
*/
bool selectLightType<S : ISampleGenerator>(out uint lightType, out float pdf, inout S sg)
{
    float p[3];
    getLightTypeSelectionProbabilities(p);

    float u = sampleNext1D(sg);

    [unroll]
    for (lightType = 0; lightType < 3; ++lightType)
    {
        if (u < p[lightType])
        {
            pdf = p[lightType];
            return true;
        }
        u -= p[lightType];
    }

    return false;
}

/** Generates a light sample on the environment map. */
bool generateEnvMapSample<
    S : ISampleGenerator>(const ShadingData sd, inout S sg, const float wavelength, out PathReconstructionData seed, out LightSample ls)
{
    ls = {}; // Default initialization to avoid divergence at returns.
    seed = {};
    if (!kUseEnvLight)
        return false;

    // Sample environment map.
    EnvMapSample lightSample;
    if (!envMapSampler.sample(sampleNext2D(sg), wavelength, lightSample))
        return false;

    // Setup returned sample.
    const hwss_t L = lightSample.pdf > 0.f ? lightSample.Le / lightSample.pdf : hwss_t(.0f);
    // Env light arrives from +inf
    ls.beam = pltSourceBeamDistant(
        -lightSample.dir, kSourcingMaxBeamOmega, L, lightSample.wavelengths, kSourcingMaxBeamOmega, kForceFullyCoherent
    );
    ls.pdf = lightSample.pdf;
    ls.origin = computeNewRayOrigin(sd, lightSample.dir);
    ls.distance = kRayTMax;
    ls.dir = lightSample.dir;

    seed.setLightSample(L, ls.pdf, ls.origin, ls.distance, ls.dir, float3(0.f), wavelength, true, kSourcingMaxBeamOmega);

    return any(L > 0.f);
}

/** Generates a light sample on the emissive geometry. */
bool generateEmissiveSample<S : ISampleGenerator>(
    const ShadingData sd,
    inout S sg,
    const float wavelength,
    bool importanceSampleSpectrum,
    out PathReconstructionData seed,
    out LightSample ls
)
{
    ls = {}; // Default initialization to avoid divergence at returns.
    seed = {};
    if (!kUseEmissiveLights)
        return false;

    TriangleLightSample tls;
    if (!emissiveSampler.sampleLight(sd.posW, sd.N, false, sg, wavelength, importanceSampleSpectrum, tls))
        return false;

    // Setup returned sample.
    const hwss_t L = tls.pdf > 0.f ? tls.Le / tls.pdf : hwss_t(.0f);
    ls.pdf = tls.pdf;
    // Offset shading and light position to avoid self-intersection.
    const float3 lightPos = computeRayOrigin(tls.posW, tls.normalW);
    ls.origin = computeNewRayOrigin(sd, lightPos - sd.posW);
    const float3 toLight = lightPos - ls.origin;
    ls.distance = length(toLight);
    ls.dir = normalize(toLight);
    ls.beam = pltSourceBeamArea(
        tls.posW, -ls.dir, kSourcingAreaFromEmissiveGeometry, ls.distance, L, tls.wavelengths, kSourcingMaxBeamOmega, kForceFullyCoherent
    );

    seed.setLightSample(L, ls.pdf, ls.origin, ls.distance, ls.dir, tls.posW, wavelength, false, kSourcingAreaFromEmissiveGeometry);
    return any(L > 0.f);
}

/** Generates a light sample on the analytic lights. */
bool generateAnalyticLightSample<S : ISampleGenerator>(
    const ShadingData sd,
    inout S sg,
    const float wavelength,
    bool importanceSampleSpectrum,
    out PathReconstructionData seed,
    out LightSample ls
)
{
    ls = {}; // Default initialization to avoid divergence at returns.
    seed = {};
    uint lightCount = gScene.getLightCount();
    if (!kUseAnalyticLights || lightCount == 0)
        return false;

    // Sample analytic light source selected uniformly from the light list.
    // TODO: Sample based on estimated contributions as pdf.
    uint lightIndex = min(uint(sampleNext1D(sg) * lightCount), lightCount - 1);
    let light = gScene.getLight(lightIndex);

    // Sample local light source.
    AnalyticLightSample lightSample;
    if (!sampleLight(sd.posW, light, sg, wavelength, importanceSampleSpectrum, lightSample))
        return false;

    const bool isDistantEmitter = light.type == (uint)LightType::Directional || light.type == (uint)LightType::Distant;
    const float A = light.surfaceArea; // mm^2
    const float Omega = 4.f * M_PI * (1.f - sqr(light.cosSubtendedAngle));

    const hwss_t L = lightSample.Li * lightCount;

    // Setup returned sample.
    ls.pdf = lightSample.pdf / lightCount;
    // Offset shading position to avoid self-intersection.
    ls.origin = computeNewRayOrigin(sd, lightSample.dir);
    // No need to adjust the ray length to avoid self-intersections at the light.
    ls.distance = lightSample.distance;
    ls.dir = lightSample.dir;

    seed.setLightSample(L, ls.pdf, ls.origin, ls.distance, ls.dir, light.posW, wavelength, isDistantEmitter, isDistantEmitter ? Omega : A);

    const hwss_t wavelengths = lightSample.wavelengths;
    if (isDistantEmitter)
    {
        ls.beam = pltSourceBeamDistant(-ls.dir, Omega, L, wavelengths, kSourcingMaxBeamOmega, kForceFullyCoherent);
    }
    else
    {
        ls.beam = pltSourceBeamArea(light.posW, -ls.dir, A, ls.distance, L, wavelengths, kSourcingMaxBeamOmega, kForceFullyCoherent);
    }

    return any(L > 0.f);
}

bool regenerateSample(const PathReconstructionData seed, out LightSample ls)
{
    ls = {}; // Default initialization to avoid divergence at returns.
    if (!kUseEnvLight && seed.LightType == (uint)SampledLightType::EnvMap)
        return false;
    if (!kUseEmissiveLights && seed.LightType == (uint)SampledLightType::Emissive)
        return false;
    if (!kUseAnalyticLights && seed.LightType == (uint)SampledLightType::Analytic)
        return false;

    ls.pdf = seed.pdf;
    ls.origin = seed.origin;
    ls.distance = seed.distance;
    ls.dir = seed.dir;
    if (seed.isDistantEmitter)
        ls.beam = pltSourceBeamDistant(-ls.dir, seed.Size, seed.Le, seed.wavelength, kSourcingMaxBeamOmega, kForceFullyCoherent);
    else
        ls.beam = pltSourceBeamArea(
            seed.posW, -ls.dir, seed.Size, ls.distance, seed.Le, seed.wavelength, kSourcingMaxBeamOmega, kForceFullyCoherent
        );
    return any(seed.Le > 0.f);
}

bool generateLightSample<S : ISampleGenerator>(
    const ShadingData sd,
    const bool sampleReflection,
    const bool sampleTransmission,
    inout S sg,
    inout S tilesg,
    const float wavelength,
    bool importanceSampleSpectrum,
    out PathReconstructionData seed,
    out LightSample ls
)
{
    ls = {};
    seed = {};
    uint lightType;
    float selectionPdf;
    // Select light type
    // Use the per-tile SG if requested
    bool success;
    if (kNEEUsePerTileSelectorSG)
        success = selectLightType(lightType, selectionPdf, tilesg);
    else
        success = selectLightType(lightType, selectionPdf, sg);
    if (!success)
        return false;

    bool valid = false;
    if (kUseEnvLight && lightType == (uint)SampledLightType::EnvMap)
        valid = generateEnvMapSample(sd, sg, wavelength, seed, ls);
    if (kUseEmissiveLights && lightType == (uint)SampledLightType::Emissive)
        valid = generateEmissiveSample(sd, sg, wavelength, importanceSampleSpectrum, seed, ls);
    if (kUseAnalyticLights && lightType == (uint)SampledLightType::Analytic)
        valid = generateAnalyticLightSample(sd, sg, wavelength, importanceSampleSpectrum, seed, ls);

    seed.setLightType(lightType, selectionPdf);

    // Account for light type selection.
    ls.lightType = lightType;
    ls.pdf *= selectionPdf;
    ls.beam.scale(1.f / selectionPdf);

    // Reject samples in non-requested hemispheres.
    const bool isReflection = dot(sd.faceN, ls.dir) * dot(sd.faceN, sd.V) > .0f;
    return valid && ls.pdf > 1e-6f && !(!sampleReflection && isReflection) && !(!sampleTransmission && !isReflection);
}

bool restoreLightSample(
    const PathReconstructionData seed,
    const ShadingData sd,
    const bool sampleReflection,
    const bool sampleTransmission,
    const float wavelength,
    out LightSample ls
)
{
    ls = {};
    bool valid = regenerateSample(seed, ls);

    ls.lightType = seed.LightType;
    ls.pdf *= seed.selectionPdf;
    ls.beam.scale(1.f / seed.selectionPdf);

    // Reject samples in non-requested hemispheres.
    const bool isReflection = dot(sd.faceN, ls.dir) * dot(sd.faceN, sd.V) > .0f;
    return valid && ls.pdf > 1e-6f && !(!sampleReflection && isReflection) && !(!sampleTransmission && !isReflection);
}
/** Russian Roulette */
float RR(const float rrVal, const float rrE, const float sample) {
    const float p = pow(rrVal, rrE);

    return sample<p ?
        .0f :
        1.f-p;
}
